// <auto-generated />
using System;
using ChangeTrackerOwnedEntitiesReproducible.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChangeTrackerOwnedEntitiesReproducible.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChangeTrackerOwnedEntitiesReproducible.Domain.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AltTelephoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("alt_telephone_number");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("DeliveryInstructions")
                        .HasColumnType("text")
                        .HasColumnName("delivery_instructions");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("forename");

                    b.Property<bool>("MarketingOptIn")
                        .HasColumnType("boolean")
                        .HasColumnName("marketing_opt_in");

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("mobile_phone_number");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<bool>("SmsMarketing")
                        .HasColumnType("boolean")
                        .HasColumnName("sms_marketing");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<bool>("WelcomeCallComplete")
                        .HasColumnType("boolean")
                        .HasColumnName("welcome_call_complete");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", "public");
                });

            modelBuilder.Entity("ChangeTrackerOwnedEntitiesReproducible.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Forename")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("forename");

                    b.Property<string>("MobilePhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("mobile_phone_number");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("surname");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("ChangeTrackerOwnedEntitiesReproducible.Infrastructure.UnitOfWork+AuditEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<string>("KeyValues")
                        .HasColumnType("text")
                        .HasColumnName("key_values");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on_utc");

                    b.Property<string>("NewValues")
                        .HasColumnType("text")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .HasColumnType("text")
                        .HasColumnName("old_values");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("table_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_audit_entry");

                    b.ToTable("audit_entry", "public");
                });

            modelBuilder.Entity("ChangeTrackerOwnedEntitiesReproducible.Infrastructure.UnitOfWork+AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AffectedColumns")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("affected_columns");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("old_values");

                    b.Property<string>("PrimaryKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("primary_key");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("table_name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_audit_logs");

                    b.ToTable("audit_logs", "public");
                });

            modelBuilder.Entity("ChangeTrackerOwnedEntitiesReproducible.Domain.Customer", b =>
                {
                    b.OwnsOne("ChangeTrackerOwnedEntitiesReproducible.Domain.ValueObject.CustomerAddress", "CorrespondenceAddress", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("correspondence_address_address_line1");

                            b1.Property<string>("AddressLine2")
                                .HasColumnType("text")
                                .HasColumnName("correspondence_address_address_line2");

                            b1.Property<string>("City")
                                .HasColumnType("text")
                                .HasColumnName("correspondence_address_city");

                            b1.Property<string>("County")
                                .HasColumnType("text")
                                .HasColumnName("correspondence_address_county");

                            b1.Property<string>("Postcode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("correspondence_address_postcode");

                            b1.HasKey("CustomerId");

                            b1.ToTable("customers", "public");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId")
                                .HasConstraintName("fk_customers_customers_id");
                        });

                    b.OwnsOne("ChangeTrackerOwnedEntitiesReproducible.Domain.ValueObject.CustomerAddress", "DeliveryAddress", b1 =>
                        {
                            b1.Property<Guid>("CustomerId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("AddressLine1")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("delivery_address_address_line1");

                            b1.Property<string>("AddressLine2")
                                .HasColumnType("text")
                                .HasColumnName("delivery_address_address_line2");

                            b1.Property<string>("City")
                                .HasColumnType("text")
                                .HasColumnName("delivery_address_city");

                            b1.Property<string>("County")
                                .HasColumnType("text")
                                .HasColumnName("delivery_address_county");

                            b1.Property<string>("Postcode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("delivery_address_postcode");

                            b1.HasKey("CustomerId");

                            b1.ToTable("customers", "public");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId")
                                .HasConstraintName("fk_customers_customers_id");
                        });

                    b.Navigation("CorrespondenceAddress")
                        .IsRequired();

                    b.Navigation("DeliveryAddress");
                });
#pragma warning restore 612, 618
        }
    }
}
